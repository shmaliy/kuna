<?php

namespace app\controllers;

use app\models\Iterations;
use app\models\MarketSeek;
use app\models\Param;
use app\models\RegisterForm;
use app\models\User;
use Yii;
use yii\filters\AccessControl;
use yii\web\Controller;
use yii\web\Response;
use yii\filters\VerbFilter;
use app\models\LoginForm;
use app\models\ContactForm;

class SiteController extends Controller
{
    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            'access' => [
                'class' => AccessControl::className(),
                'only' => ['logout'],
                'rules' => [
                    [
                        'actions' => ['logout'],
                        'allow' => true,
                        'roles' => ['@'],
                    ],
                ],
            ],
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    'logout' => ['post'],
                    'ticker' => ['post'],
                ],
            ],
        ];
    }
    
    public function beforeAction( $action ) {
        $this->enableCsrfValidation = false;
        return parent::beforeAction( $action ); // TODO: Change the autogenerated stub
    }
    
    /**
     * @inheritdoc
     */
    public function actions()
    {
        return [
            'error' => [
                'class' => 'yii\web\ErrorAction',
            ],
            'captcha' => [
                'class' => 'yii\captcha\CaptchaAction',
                'fixedVerifyCode' => YII_ENV_TEST ? 'testme' : null,
            ],
        ];
    }

    /**
     * Displays homepage.
     *
     * @return string
     */
    public function actionIndex()
    {
        /** @var User $me */
        $me = Yii::$app->user->getIdentity();
        if (is_null($me)) return $this->redirect('/site/login');
        
        
        $data = new MarketSeek();
        $data->market = MarketSeek::MARKET_ethuah;
        $data = $data->getCharts();
    
        $iteration = new Iterations();
        $iteration->userId = $me->id;
        $params = new Param();
        $params->userId = $me->id;
        return $this->render('index', [
            'data' => $data,
            'iteration' => $iteration->getIteration(),
            'params' =>$params->getParams()
        ]);
    }
    
    public function actionToggleTrade()
    {
        /** @var User $me */
        $me = Yii::$app->user->getIdentity();
        if (is_null($me)) {
            return json_encode([
                'status' => false,
                'data' => [],
                'message' => '',
                'authorized' => false
            ]);
        }
        if (Yii::$app->request->isPost && isset(Yii::$app->request->post()['trading'])) {
            $exist = Param::findOne(['userId' => $me->id, 'name' => Param::P_trading]);
            $exist->value = Yii::$app->request->post()['trading'];
            $exist->save();
            return json_encode([
                'status' => true,
                'data' => ['trading' => $exist->value],
                'message' => '',
                'authorized' => true
            ]);
        }
    }
    
    public function actionSaveParams()
    {
        /** @var User $me */
        $me = Yii::$app->user->getIdentity();
        if (is_null($me)) {
            return json_encode([
                'status' => false,
                'data' => [],
                'message' => '',
                'authorized' => false
            ]);
        }
        if (Yii::$app->request->isPost) {
            $list = Param::findAll(['userId' => $me->id]);
            
            $ret = [];
            
            /** @var Param $param */
            foreach ($list as $param) {
                if (isset(Yii::$app->request->post()[$param->name])
                    && Yii::$app->request->post()[$param->name] != $param->value) {
                    $param->value = Yii::$app->request->post()[$param->name];
                    if ($param->save()) {
                        $ret[] = $param->getAttributes();
                    }
                }
            }
            return json_encode([
                'status' => true,
                'data' => ['params' => $ret],
                'message' => '',
                'authorized' => true
            ]);
        }
    }
    
    public function actionLogin()
    {
        if (Yii::$app->request->isPost) {
            if (User::login(Yii::$app->request->post('email', null),
                Yii::$app->request->post('password', null))) {
                return $this->redirect('/site/index');
            } else {
                return $this->redirect('/site/login');
            }
        }
        
        return $this->render('login');
    }
    
    public function actionTicker()
    {
        /** @var User $me */
        $me = Yii::$app->user->getIdentity();
        if (is_null($me)) return $this->redirect('/site/login');
        
        $data = new MarketSeek();
        $data->market = MarketSeek::MARKET_ethuah;
        $charts = $data->getCharts();
        
        if (count($charts) == 0) {
            $min = 0;
            $curr = 0;
        } else {
            $min = reset($charts)['last'];
            foreach($charts as $c) {
                if ($c['last'] < $min) $min = $c['last'];
            }
            $curr = end($charts)['last'];
        }
        $iteration = new Iterations();
        $iteration->userId = $me->id;
        $params = new Param();
        $params->userId = $me->id;
        
        
        return json_encode([
            'charts' => $charts,
            'min' => $min,
            'curr' => $curr,
            'iteration' => $iteration->getIteration(),
            'params' =>$params->getParams()
        ]);
    }
}
